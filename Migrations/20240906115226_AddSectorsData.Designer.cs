// <auto-generated />
using System;
using Backcrazyhorse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backcrazyhorse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240906115226_AddSectorsData")]
    partial class AddSectorsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Backcrazyhorse.Models.ClimbingRoute", b =>
                {
                    b.Property<int>("ClimbingRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoltCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SectorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClimbingRouteId");

                    b.HasIndex("SectorId");

                    b.ToTable("ClimbingRoutes");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClimbingRouteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SectorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageId");

                    b.HasIndex("ClimbingRouteId");

                    b.HasIndex("SectorId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Massive", b =>
                {
                    b.Property<int>("MassiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MassiveId");

                    b.HasIndex("RegionId");

                    b.ToTable("Massives");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MassiveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SectorId");

                    b.HasIndex("MassiveId");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            SectorId = 1,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Heart Wall"
                        },
                        new
                        {
                            SectorId = 2,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "rooftop"
                        },
                        new
                        {
                            SectorId = 3,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Gatekeeper Buttress"
                        },
                        new
                        {
                            SectorId = 4,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Anxiety State Crisis Cave"
                        },
                        new
                        {
                            SectorId = 5,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Reunion Buttress"
                        },
                        new
                        {
                            SectorId = 6,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Buddha Buttress"
                        },
                        new
                        {
                            SectorId = 7,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Aircon Wall"
                        },
                        new
                        {
                            SectorId = 8,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Windy Cave"
                        },
                        new
                        {
                            SectorId = 9,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Crazy Horse Area"
                        },
                        new
                        {
                            SectorId = 10,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Horse Shoe"
                        },
                        new
                        {
                            SectorId = 11,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Archway"
                        },
                        new
                        {
                            SectorId = 12,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Evening Terraces"
                        },
                        new
                        {
                            SectorId = 13,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Furnace"
                        },
                        new
                        {
                            SectorId = 14,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Junkyard"
                        },
                        new
                        {
                            SectorId = 15,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Hanging Gardens"
                        },
                        new
                        {
                            SectorId = 16,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Tamarind Village"
                        },
                        new
                        {
                            SectorId = 17,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Little Monkey Cove"
                        },
                        new
                        {
                            SectorId = 18,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Vision"
                        },
                        new
                        {
                            SectorId = 19,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "Naam Prik Wall"
                        },
                        new
                        {
                            SectorId = 20,
                            Describe = "Описание сектора",
                            MassiveId = 111,
                            Name = "The Ant Hill"
                        });
                });

            modelBuilder.Entity("Backcrazyhorse.Models.ClimbingRoute", b =>
                {
                    b.HasOne("Backcrazyhorse.Models.Sector", "Sector")
                        .WithMany("ClimbingRoutes")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Image", b =>
                {
                    b.HasOne("Backcrazyhorse.Models.ClimbingRoute", "ClimbingRoute")
                        .WithMany("Images")
                        .HasForeignKey("ClimbingRouteId");

                    b.HasOne("Backcrazyhorse.Models.Sector", "Sector")
                        .WithMany("Images")
                        .HasForeignKey("SectorId");

                    b.Navigation("ClimbingRoute");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Massive", b =>
                {
                    b.HasOne("Backcrazyhorse.Models.Region", "Region")
                        .WithMany("Massives")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Region", b =>
                {
                    b.HasOne("Backcrazyhorse.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Sector", b =>
                {
                    b.HasOne("Backcrazyhorse.Models.Massive", "Massive")
                        .WithMany("Sectors")
                        .HasForeignKey("MassiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Massive");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.ClimbingRoute", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Massive", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Region", b =>
                {
                    b.Navigation("Massives");
                });

            modelBuilder.Entity("Backcrazyhorse.Models.Sector", b =>
                {
                    b.Navigation("ClimbingRoutes");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
